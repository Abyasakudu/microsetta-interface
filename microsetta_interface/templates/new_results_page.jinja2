{% extends "sitebase.jinja2" %}
{% set page_title = "Sample Results" %}
{% set show_breadcrumbs = True %}

{% block head %}

<link rel="stylesheet" type="text/css" href="/static/vendor/css/jquery.dataTables.css" />
<link id="emperor-css" rel="stylesheet" type="text/css" href="/static/vendor/emperor/css/emperor.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery-ui.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/slick.grid.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/spectrum.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/chosen.min.css">
<link rel="stylesheet" type="text/css" href="/static/vendor/emperor/vendor/css/jquery.contextMenu.min.css">
<link rel="stylesheet" type="text/css" href="/static/css/4_column_flex.css" />
<style>
    .diversity-icon {
      vertical-align: middle;
      width: 48px;
      height: 48px;
      object-fit: contain;
     }
    .diversity-text {
        vertical-align:middle; 
        display:inline;
    }
    .diversity-header {
        background-color: #EDECEF;
        padding: 10px;
    }
    /*Removes the .active, .accordion:hover effect from minimal_interface.css*/
    /* Could potentially use color: initial but has less support...? */
    .tab-pane {
        background-color: #FFFFFF;
        color: #000000;
    }
    .microbe-count {
        font-weight: bold;
    }
    div.results_text {
        text-align: left;
    }
    div.how_you_compare_section {
        background-color: #EDECEF;
        /*border-radius: 15px; */
        padding: 10px;
    }
    div.your_sample_diversity_inset {
        background-color: #EDECEF;
        padding: 10px;
    }

    .tooltipper {
        color: #fc8900;
    }
    .tooltip.show {
        opacity: 1;
    }
     
    .tooltip-inner {
      background-color: #ffffff; !important;
      color: #747678;
      border: 2px solid #fc8900;
      }
     
    .bs-tooltip-auto[x-placement^=bottom] .arrow::before, .bs-tooltip-bottom .arrow::before {
        border-bottom-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=top] .arrow::before, .bs-tooltip-top .arrow::before {
        border-top-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=left] .arrow::before, .bs-tooltip-left .arrow::before {
        border-left-color: #fc8900 !important;
    }
    .bs-tooltip-auto[x-placement^=right] .arrow::before, .bs-tooltip-right .arrow::before {
        border-right-color: #fc8900 !important;
    }
 
</style>

<script type="text/javascript" language="javascript" src="/static/js/ruleset.js"></script>
<!-- Datatables must precede emperor imports, they don't play nice with each other. -->
<script type="text/javascript" charset="utf8" src="/static/vendor/js/jquery.dataTables.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/dataTables.buttons.min.js"></script>
<script src="/static/vendor/DataTables/Buttons-1.6.2/js/buttons.html5.min.js"></script>
<script src="/static/vendor/DataTables/PercentageBars-1.10.21/js/percentageBars.js"></script>
    <!-- plotly must precede emperor imports as well.   I'm getting the feeling
     that emperor doesn't know how to play nice. -->
<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>

<script src="/static/vendor/emperor/vendor/js/require-2.1.22.min.js"></script>
<script src="/static/vendor/emperor/emperor_loader.js"></script>

<script>
    "use strict";
    function formatAlphaURL(state) {
        let base = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/plotting/diversity/alpha/' + state.alpha_metric + '/percentiles-plot';
        if (state.sample_id !== "") {
            base = base + '?sample_id=' + state.barcode_prefix + state.sample_id;
        }
        return base;
    }

    function refreshDatasets(state) {
        let url = state.public_endpoint + '/sample/list/dataset/' + state.barcode_prefix + state.sample_id;
        $.ajax({
            url: url,
            type: "GET",
            success: function(data)
            {
                let resultMap = {};
                for (var key in data)
                    resultMap[data[key]] = data[key]
                populateSelect("#dataset", resultMap, data[0]);
                //TODO FIXME HACK:
                //Updating $("#dataset") should have automatically updated
                //the state but jquery's change event is not triggering linked
                //events at the time populate select is called, even when
                //explicitly calling $("#dataset").change().
                //This issue appears to only occur while emperor is loading
                //suggesting that emperor is either messing with the DOM or
                //with jquery itself when it first loads in.  (or that loading
                //emperor is slow and there is some kind of race condition)
                //We thus bypass the jquery event handling and directly update
                //the state which does correctly queue events.
                state.dataset_input.value = $("#dataset").val();
            }
        });
    }

    function populateSelect(select_selector, value_to_text, active_value){
        let select = $(select_selector);
        select.empty();
        for (let v in value_to_text)
        {
            let option = $('<option></option>')
                .attr("value", v)
                .text(v);
//                .text(value_to_text[v]);  //It should be this, but public api needs to send down friendly names

            if (v === active_value)
                option.attr('selected','selected');

            select.append(option);
        }
        select.prop("disabled", false);
    }

    function createTaxonomyTable(state)
    {
        $('#taxonomyTable').DataTable(
            {
                destroy: true, // Necessary to replace existing datatable
                ajax: {
                    url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/taxonomy/present/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id,
                    dataSrc: function(d){
                        let representatives = {};
                        let generaSums = {};
                        //Collapse to genera (Don't show separate rows per species)
                        for (let i = 0; i < d.data.length; i++){
                            //Can't just key by genus because genus can be null/undefined.  Argh.
                            let genus_key = d.data[i].Kingdom + ";" +
                                            d.data[i].Phylum + ";" +
                                            d.data[i].Class + ";" +
                                            d.data[i].Order + ";" +
                                            d.data[i].Family + ";" +
                                            d.data[i].Genus;
                            if (genus_key in generaSums)
                            {
                                generaSums[genus_key] += d.data[i].relativeAbundance;
                            }
                            else
                            {
                                representatives[genus_key] = d.data[i];
                                generaSums[genus_key] = d.data[i].relativeAbundance;
                            }
                        }
                        let newData = [];
                        for (let genus_key in generaSums){
                            let rep = representatives[genus_key];
                            let sum = generaSums[genus_key];
                            rep.relativeAbundance = (sum * 100).toFixed(4);
                            for (var key of ["Kingdom", "Phylum", "Class", "Order", "Family", "Genus"]){
                                if (rep[key] != null && rep[key].startsWith("[") && rep[key].endsWith("]"))
                                    rep[key] = rep[key].substring(1,rep[key].length-1)
                            }
                            newData.push(rep);
                        }
                        return newData;
                    }
                },
                columns: [
                    {
                        data: "relativeAbundance",
                        render: $.fn.dataTable.render.percentBar('round','#FFF', '#269ABC', '#31B0D5', '#286090', 4, 'groove')
                    },
                    {data: "Kingdom"},
                    {data: "Phylum"},
                    {data: "Class"},
                    {data: "Order"},
                    {data: "Family"},
                    {data: "Genus"},
                ],
                order: [[ 0, "desc" ]],
                dom: "Bfrtip",
                buttons: [{extend: 'csv', className: 'btn btn-info'}],
            }
        );
    }
    
    function updateCompare(state){
        // Reset all the fields to spinners
        $(".info-loader").empty().addClass("spinner-grow spinner-grow-sm");

        // Stuff to fill in:
        // sample_type, n_bacteria, n_archaea, dataset_name,
        // n_bacteria_background, n_archaea_background,
        // age_nearest_neighbor, more_or_less_sweets_nearest_neighbor

        function retrieveText(method, url, data){
            return $.ajax({
                method: method,
                url: url,
                data: JSON.stringify(data),
                contentType: "application/json"
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve text for " + method + " " + url);
            });
        }

        function setInfoText(resultSelector){
            return function(result, textStatus, jqXHR){
                return $(resultSelector).text(result).removeClass("spinner-grow spinner-grow-sm");
            };
        }

        function retrieveNeighbors(state, k){
            let url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/diversity/beta/' + state.beta_metric + '/nearest';
            return $.ajax({
                method: "GET",
                url: url,
                data: {
                    sample_id: state.barcode_prefix + state.sample_id,
                    k:k
                }
            }).fail(function(result, textStatus, errorThrown){
                console.log("Couldn't retrieve neighbors" + textStatus)
            });
        }

        function queryNeighborAndSelfMetadata(state, metadata_cats){
            return function(result, textStatus, jqXHR)
            {
                let toQuery = result;
                toQuery.push(state.barcode_prefix + state.sample_id);

                return $.ajax(
                {
                    method: "POST",
                    url: state.public_endpoint + '/dataset/' + state.dataset_input.value + "/metadata/values?" + $.param({ cat: metadata_cats }, true), // The true indicates traditional mode, which produces cat=blah&cat=blah rather than cat[]=blah&cat[]=blah which crashes the server.
                    data: JSON.stringify(toQuery),
                    contentType: "application/json"
                }).fail(function(result, textStatus, errorThrown){
                    console.log("Couldn't retrieve metadata for neighbors and self " + errorThrown)
                }).then(function(result, textStatus, jqXHR){
                    let thenner = {};
                    thenner.then = function(func){
                        // Need to pass on the sample ids. Argh.
                        return func(toQuery, result);
                    };
                    return thenner;
                });
            };
        }

        function fillResults(state, selectors)
        {
            return function(samplesQueried, sampleResults)
            {
                // First selector, age, Second selector, sweets
                // No similarity between the two, so we just have to handle both
                let me = samplesQueried.pop();
                let my_data = sampleResults.pop();

                if (me !== (state.barcode_prefix + state.sample_id))
                    console.log("Bad call to fill results, sample id mismatch");

                for (let selector_index = 0; selector_index < selectors.length; selector_index++)
                {
                    if (selectors[selector_index] === "#age_nearest_neighbor")
                    {
                        // Find age of first neighbor with age
                        let nearest_age = "Unspecified";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "Unspecified")
                            {
                                nearest_age = Math.round(sampleResults[i][selector_index]);
                                break;
                            }
                        }
                        if (nearest_age === "Unspecified")
                            setInfoText(selectors[selector_index])("chose not to provide their age", null, null);
                        else
                            setInfoText(selectors[selector_index])("is " + nearest_age + " years old", null, null);
                    }
                    if (selectors[selector_index] === "#more_or_less_sweets_nearest_neighbor")
                    {
                        // Find string value for first neighbor with a string value
                        let nearest_sweets = "Unspecified";
                        for (let i = 0; i < samplesQueried.length; i++)
                        {
                            if (sampleResults[i][selector_index] !== "Unspecified" &&
                                sampleResults[i][selector_index] !== "Not provided")
                            {
                                nearest_sweets = sampleResults[i][selector_index];
                                break;
                            }
                        }

                        // Comparing metadata is an absolute nightmare.
                        let possible_values = {
                            "Unspecified" : NaN,
                            "Not provided" : NaN,
                            "Never" : 0,
                            "Rarely (less than once/week)" : 1,
                            "Occasionally (1-2 times/week)" : 2,
                            "Regularly (3-5 times/week)" : 3,
                            "Daily": 4
                        }

                        let my_sweets = possible_values[my_data[selector_index]];
                        let their_sweets = possible_values[nearest_sweets];

                        let info_text = "";
                        if (isNaN(my_sweets)){
                            if (isNaN(their_sweets))
                                info_text = "chose not to say how many sweets they eat";
                            else
                                info_text = nearest_sweets.toLowerCase() + " eats sweets";
                        }
                        else{
                            if (my_sweets < their_sweets)
                                info_text = "eats more sugary sweets than you";
                            else if (my_sweets > their_sweets)
                                info_text = "eats fewer sugary sweets than you";
                            else if (my_sweets === their_sweets)
                                info_text = "eats about the same number of sugary sweets as you";
                            else
                                info_text = "chose not to say how many sweets they eat";
                        }

                        setInfoText(selectors[selector_index])(info_text, null, null);
                    }
                }
            }
        }

        $("#sample_type").text(state.sample_type).removeClass("spinner-grow spinner-grow-sm");
        $("#dataset_name").text(state.dataset_input.value).removeClass("spinner-grow spinner-grow-sm");
        // TODO: Fill in these URLs
        retrieveText("GET", state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/single/" + state.taxonomy + "/" + state.barcode_prefix + state.sample_id + "/counts?level=Kingdom", null).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveText(
            "POST",
            state.public_endpoint + "/dataset/" + state.dataset_input.value + "/taxonomy/group/" + state.taxonomy + "/counts?level=Kingdom",
            {"sample_ids":[]}
        ).then(
            function(result, textStatus, jqXHR){
                $("#n_bacteria_background").text(result["Bacteria"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
                $("#n_archaea_background").text(result["Archaea"].toLocaleString()).addClass("microbe-count").removeClass("spinner-grow spinner-grow-sm");
            });
        retrieveNeighbors(state, 1)
            .then(queryNeighborAndSelfMetadata(state, ["age_years", "sugary_sweets_frequency"]))
            .then(fillResults(state, ["#age_nearest_neighbor", "#more_or_less_sweets_nearest_neighbor"]));
    }

    function updateDiversity(state){
        //https://www-dev.ucsd.edu/results-api/diversity/alpha/group/faith_pd?summary_statistics=true

        let queries = [];
        let countries = ["USA", "United Kingdom"];
        for (let country of countries){
            let query = $.ajax(
            {
                url: state.public_endpoint + "/dataset/" +
                     state.dataset_input.value +
                     "/diversity/alpha/group/" +
                     state.alpha_metric + "?" + $.param({summary_statistics: true}),
                method: "POST",
                data: JSON.stringify(
                {
                    "metadata_query":
                    {
                        "condition": "OR",
                        "rules":
                        [
                            {
                                "id": "country",
                                "operator": "equal",
                                "value": country
                            }
                        ]
                    }
                }),
                contentType: "application/json"
            });
            queries.push(query)
        }

        let queryMe = $.ajax(
            {
                url: state.public_endpoint + "/dataset/" +
                     state.dataset_input.value +
                     "/diversity/alpha/single/" +
                     state.alpha_metric + "/" + state.barcode_prefix + state.sample_id
            }
        );
        queries.push(queryMe);
        $.when.apply($, queries).done(function(){
            let traces = [];
            for (let i = 0; i < countries.length; i++)
            {
                let country = countries[i];
                let alpha_summary = arguments[i][0];

                let fill = "tozeroy";
                if (i > 0)
                    fill = "tozeroy";
                let trace = {
                    name: countries[i],
                    x: alpha_summary.group_summary.percentile_values,
                    y: alpha_summary.group_summary.percentile,
                    fill: fill
                };
                traces.push(trace);
            }

            let myQueryIndex = countries.length;
            let myAlphaMetric = arguments[myQueryIndex][0].data;
            let trace = {
                name: "Me",
                x: [myAlphaMetric, myAlphaMetric],
                y: [0, 100],
                mode: "line"
            };
            traces.push(trace);

            let layout = {
                title: "Faith PD by Country"
            };
            Plotly.newPlot("diversity-vis", traces);
        })
    }

    function updateSimilarity(similarityData, state){
        if (similarityData === null){
            $("#emperor-notebook").empty();
<!--        $(".content").nextAll().remove(); //Why does emperor put stuff out here?  This is hard to find and deal with...-->
            return;
        }

        let url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/plotting/diversity/beta/' + state.beta_metric + '/pcoa/' + state.sample_type + '/emperor?metadata_categories=age_cat&metadata_categories=bmi_cat&metadata_categories=country';
        // url += '&metadata_categories=title';  //We want to include this, but public api doesn't support it yet.
        loadEmperor(
            url,
            "/static/vendor/emperor",
            function(){
            },
            state.barcode_prefix + state.sample_id
        );
    }
    function updateTaxonomy(taxonomyData, state){
        // Rebuild taxonomy table when we switch dataset
        createTaxonomyTable(state);

        //Need to make taxa rank plot
        let sampling_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy?' +
            $.param({sample_size: 30000});
        let my_sample_url = state.public_endpoint + '/dataset/' + state.dataset_input.value + '/taxonomy/ranks/taxonomy/sample/' + state.barcode_prefix + state.sample_id;

        let query1 = $.ajax({
            url: sampling_url,
            type: "GET"
        });

        let query2 = $.ajax({
            url: my_sample_url,
            type: "GET"
        });

        $.when(query1, query2).done(function(sampling_results, sample_results){
            let X = 10;
            let topXOrdered = sampling_results[0]["Taxa-order"].slice(0,X);
            $("#top_ranked_genus_from_plot").text(topXOrdered[0]).removeClass("spinner-grow spinner-grow-sm");

            topXOrdered.reverse();
            let topX = new Set(topXOrdered);

            let sampling_x = [];
            let sampling_y = [];
            let sample_x = [];
            let sample_y = [];
            for (let i =0; i < sampling_results[0].Rank.length; i++)
            {
                if (topX.has(sampling_results[0].Taxon[i]))
                {
                    sampling_x.push(sampling_results[0].Rank[i]);
                    sampling_y.push(sampling_results[0].Taxon[i]);
                }
            }

            for (let i = 0; i < sample_results[0].Rank.length; i++)
            {
                if (topX.has(sample_results[0].Taxon[i]))
                {
                    sample_x.push(sample_results[0].Rank[i]);
                    sample_y.push(sample_results[0].Taxon[i]);
                }
            }

            let trace1 = {
                "name": "Rank Distributions",
                "showlegend": false,
                "spanmode": "hard",
                "type": "violin",
                "x": sampling_x,
                "y": sampling_y,
                "orientation": "h",
                "box": {
                    "visible": true
                },
                "meanline": {
                    "visible": true
                },
            };

            let trace2 = {
                "type": "scatter",
                "mode": "markers",
                "name": "My Sample",
                "x": sample_x,
                "y": sample_y
            };
            let data = [trace1, trace2];
            let layout = {
                "title": "How abundant are my taxa compared to everyone else?",
                "yaxis": {
                    "title": "Common Taxa",
                    "automargin": true,
                    "categoryorder": "array",
                    "categoryarray": topXOrdered
                },
                xaxis: {
                    title: '← Least Abundant | Most Abundant →'
                }
            };
            Plotly.newPlot("taxa-violin", data, layout, {displayModeBar: false});
        });
    }

    function updateDatasetDetails(state){
        $.ajax(
            {
                url: state.public_endpoint + "/dataset/" + state.dataset_input.value,
                success: function(data)
                {
                    var info = data[state.dataset_input.value]
                    if (info == null)
                        return
                    $("#dataset_title").text(info.title).removeClass("spinner-grow spinner-grow-sm");
                    if (info.datatype == "WGS"){
                        $("#dataset_datatype").text("whole genome sequencing, a technique that produces a large number of small DNA sequences from all of the microbial genomes in your sample. With enough sequences you can even see the variation that exists between microbes of the same species. ").removeClass("spinner-grow spinner-grow-sm");
                    }
                    else if (info.datatype == "16S"){
                        $("#dataset_datatype").text('16S.  This technique produces DNA sequences from a specific variable region ("V4") within a microbial gene ("the 16S small subunit ribosomal gene"). DNA sequences from this region of this gene can be used like a microbial barcode, providing researchers evidence of the types of microbes that may be present in your sample.').removeClass("spinner-grow spinner-grow-sm");
                    }
                    else {
                        $("#dataset_datatype").text(info.datatype).removeClass("spinner-grow spinner-grow-sm");

                    }
                    for (var qiita_id of info['qiita-study-ids'])
                        $("#dataset_links").append('<li><a href="https://qiita.ucsd.edu/public/?study_id=' + qiita_id + '">Qiita Study: ' + qiita_id + '</li>').removeClass("spinner-grow spinner-grow-sm");

                    if (info['qiita-study-ids'].length > 1)
                        $("#dataset_meta_analysis").text(" (which was a meta analysis that combines the data you helped collect with other public microbiome results)").removeClass("spinner-grow spinner-grow-sm");
                    else
                        $("#dataset_meta_analysis").text("").removeClass("spinner-grow spinner-grow-sm")


                },
                function(result, textStatus, errorThrown){
                    console.log("Couldn't retrieve text for " + method + " " + url);
                }
            }
        );


    }

    //Called immediately after a tab is shown
    function onTabShown(evt){
        if (evt.target.id === "similarity-tab")
        {
            // Emperor doesn't seem to understand that the tab has been shown
            // by default.  So we'll trigger a resize event on the window
            // which emperor already links to resize all of its controls.
            // Stupid, but it seems to work, whereas setting width on any of
            // the emperor controls doesn't seem to trigger necessary resizing
            // of the webGL scene
            window.dispatchEvent(new Event('resize'));
        }
    }

    function enableTooltips(){
        $('.tooltipper').tooltip({position: "bottom"});
    }

    function init(){
        enableTooltips();

        // Hook up fake tab links
        $('.fake-tab').click(function() {
            let link = this.dataset.link;
            $(link)[0].click();
        });

        // Listen for tab changes
        $('.nav-link').on('shown.bs.tab', onTabShown);

        let state = {};

        // Initialize state
        state.dataset_input = new JQuerySelectInput("Dataset", "#dataset");
        state.taxonomy = "{{taxonomy}}";
        state.alpha_metric = "{{alpha_metric}}";
        state.beta_metric = "{{beta_metric}}";
        //Just using test barcode because I can never remember a valid one.
        // DONT MERGE WITH FAKE BARCODE HERE.
        state.sample_id = "{{sample.sample_barcode}}";
        //state.sample_id = "000023984";
        //state.sample_id = "000004220";
        //state.sample_id = "000023127";

        state.barcode_prefix = "{{barcode_prefix}}";
        state.public_endpoint = "{{public_endpoint}}";
        let sample_type = "oral";
        if ("{{sample.sample_site}}" === "Stool")
            sample_type="fecal";
        state.sample_type = sample_type;

        /* Whenever dataset is changed, we fire off ajax requests
           to grab new info for the plots.  */
        new DelegateOutput(function(dataset){

            // Magic string must match default string used to initialize select box
            if (dataset === "Loading...")
                return;

            //TODO: Decide how to tell each control it is waiting on ajax data
            updateSimilarity(null, state);
            updateTaxonomy(null, state);

            let similarityData = { "result": "Similarity AJAX: " + dataset };
            let taxonomyData = { "result": "Taxonomy AJAX: " + dataset };

            updateCompare(state);
            updateDiversity(state);
            updateSimilarity(similarityData, state);
            updateTaxonomy(taxonomyData, state);
            updateDatasetDetails(state);
        }, state.dataset_input);

        refreshDatasets(state);
    }

    $(document).ready(init);
</script>
{% endblock %}

{% block breadcrumb %}
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}">Account</a></li>
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}/sources/{{source_id}}">Source</a></li>
    <li class="breadcrumb-item active" aria-current="page">Results</li>
{% endblock %}

{% block content %}
<label for="dataset">Dataset:</label>
<select id="dataset" name="dataset" autocomplete="off" disabled>
    <option>Loading...</option>
</select>

<div class="row">
    <div class="col-sm-auto">
        <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
          <a class="nav-link active" id="compare-tab" data-toggle="pill" href="#compare" role="tab" aria-controls="compare" aria-selected="true">How you compare?</a>
          <a class="nav-link" id="diversity-tab" data-toggle="pill" href="#diversity" role="tab" aria-controls="diversity" aria-selected="false">Your sample diversity</a>
          <a class="nav-link" id="similarity-tab" data-toggle="pill" href="#similarity" role="tab" aria-controls="similarity" aria-selected="false">Diversity similarities</a>
          <a class="nav-link" id="taxonomy-tab" data-toggle="pill" href="#taxonomy" role="tab" aria-controls="taxonomy" aria-selected="false">What is in your sample?</a>
          <a class="nav-link" id="dataset-tab" data-toggle="pill" href="#dataset-info" role="tab" aria-controls="dataset" aria-selected="false">How can you learn more?</a>
        </div>
    </div>
    <div class="col-sm border">
        <div class="tab-content" id="v-pills-tabContent">
          <div class="tab-pane fade show active" id="compare" role="tabpanel" aria-labelledby="compare-tab">
            <div class="column results_text">
                <h3>How You Compare?</h3>
                <br/>
                <p>
                    Your microbiome is a rainforest of diverse microbes dominated
                    by microbes - some 40 trillion bacteria, weighing around 1 lb,
                    live all over and in your body. The diversity of your
                    microbiome, how similar it is to other peoples', and the types
                    of bacteria living inside you have all been linked to health,
                    disease and lifestyle traits in numerous studies. Scientists
                    use microbiome data from large groups of people to compare the
                    microbiome between different groups of people. For example, we
                    explore how the microbiome differs between people that eat many
                    kinds of plants (salads, vegetables, fruits) each week,
                    compared to those that eat very few. Or we can look at how
                    exercising frequently or rarely influences the number of
                    different bacteria inside your body
                </p>
                
                <p>
                Scientists often use 3 different approaches to see how your microbiome differs:
                </p>

                <div class="how_you_compare_section">
                    <h4>Diversity</h4>
                    <p>
                    Scientists will count the number of different types
                    of microbes found in a sample and see if that changes in people
                    with different diseases or lifestyles. This is called <i>diversity
                    analysis</i>. Counting the number of different types of microbes in
                    a sample is like figuring out the biodiversity of the sample,
                    and as we all know, for the most part, more biodiversity is
                    better. For more information on how diverse your microbiome is
                    in compared to different people, check out <a class="fake-tab" 
                    href="#diversity" data-link="#diversity-tab">Your sample diversity</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>Similarity</h4>
                    <p>
                    Scientists often find that people with similar
                    microbiomes (similar types of microbes living on or inside you) share
                    health, disease, and lifestyle traits – almost like your
                    microbiome is a signature of how "you are, what you eat," and
                    how much you exercise, etc.
                    </p>

                    <p>
                    We looked at how often the types of microbes found in
                    your sample were also in other people's microbiomes in our
                    database. Then we identified all the people whose <span id="taxa-tooltip" class="tooltipper" data-title="testtest">microbiomes</span>
                    were similar to your microbiome (which means
                    the people with whom you share a lot of the same types of
                    bacteria). This information is then compared to that group of
                    people's questionnaire responses. You can see how they answered
                    their questionnaires in <a class="fake-tab" href="#similarity" 
                    data-link="#similarity-tab">Diversity similarities</a>.
                    </p>
                </div>
                </br>

                <div class="how_you_compare_section">
                    <h4>Taxonomy</h4>
                    <p>
                    If you REALLY want to know the names of the microbes
                    that live inside you, and a little bit of information on what
                    they do, go to <a class="fake-tab" href="#taxonomy" data-link="#taxonomy-tab">What's in your sample?</a> 
                    to browse a list of your microbial friends, and see how abundant 
                    they were in your sample!
                    </p>
                </div>
            </div>
          </div>
          <div class="tab-pane fade" id="diversity" role="tabpanel" aria-labelledby="diversity-tab">
              <div class="column results_text">
                  <h3>Your sample diversity</h3>
                  <br>
                  <p>
                  There are hundreds of millions to billions of different types
                  of bacteria living on planet earth, which dwarfs the meager 2
                  million different kinds of animals and plants that you can see
                  with your eyes. The average American has <strong>187</strong>
                  different types of microbes in a stool sample, which is lower
                  than we find in people living a more hunter-gatherer
                  lifestyle, like the <strong>306</strong> we find in samples
                  from the Hadza Tribe. 
                  </p>

                  <div class="card your_sample_diversity_inset">
                      <div class="card-header">Microbes found in your sample</div>
                      <div class="card-body">
                          <h5 class="card-title">XXX</h5>
                          <p class="card-text"> 
                          Is the number of microbes found in your sample. 
                          </p>
                      </div>
                  </div>

                  <p>
                  When scientists talk about the number of different types of
                  microbes in your sample, they call that Alpha Diversity.
                  </p>

                  <p>
                  When we calculated diversity of groups of samples in our
                  database, we found that diversity is assocaited by how you live
                  your life. So, the answers people gave to their questionnaires
                  enables us to see the average microbiome diversity for people
                  who (i) eat more than 30 plants a week; (ii) Exercise Regularly; 
                  (iii) eat fermented foods regularly; (iv) Sleep more than 
                  6 hours a night.
                  </p>

                  <div class="row mb-2 mt-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/vegetables.png'>
                          <div class="diversity-text">
                              ----- Eat more than 30 plants a week = <span id="diversity_30_plants_per_week" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/exercise.png'>
                          <div class="diversity-text">
                              ----- Exercise regularly = <span id="diversity_exercise_regularly" class="info-loader text-success">...</span>
                          </div>
                      </div>
                  </div>
                  <div class="row mb-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/fermented.png'>
                          <div class="diversity-text">
                              ----- Eat fermented foods regularly = <span id="diversity_fermented_regularly" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/sleep.png'>
                          <div class="diversity-text">
                              ----- Sleep more than 6 hours per night = <span id="diversity_sleep_alot" class="info-loader text-success">...</span>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="tab-pane fade" id="similarity" role="tabpanel" aria-labelledby="similarity-tab">
              <div class="column results_text">
                  <h3>Diversity similarities</h3>
                  <br>
                  <p>
                  When microbiome scientists talk about how similar your
                  microbiome is to someone else that call that beta diversity.
                  This is basically a calculation that compares the list of
                  different bacteria living in you to a list of bacteria living
                  in someone else. If the list has a lot of overlap then the
                  samples are very similar, if the list has very little overlap
                  the samples are not very similar. 
                  </p>

                  <p>
                  Scientists (because we love to complicate things) calculate
                  this using a backwards scale, so the higher the number the
                  lower the similarity between two samples! 
                  </p>

                  <p>
                  There are <i>a lot</i> of ways to calculate how similar
                  microbiome samples are. At a high level, there are two types
                  of similarity comparisions: 
                  </p>

                  <ul>
                      <li>
                      Unweighted similarity: this is simply a comparison of
                      the list of microbes in each sample, the more overlap
                      there between those lists the more similar samples
                      are.
                      </li>
                      <li>
                      Weighted similarity: this adds the abundance of each
                      microbe into the calculation. So even if you have the
                      exact same list of bacteria as someone else (e.g.
                      A,B,C,D,E), but bacteria A, B and C are really abundant
                      in your sample and rare in the other sample, and vice
                      versa, then you would actually have a low weighted
                      similarity.
                      </li>
                  </ul>

                  <p>
                  We compared your sample to our database, and examined the 100
                  most similar samples to yours. These people answered their
                  questionnaires in the following way:
                  </p>

                  <div id="beta-diversity-comparisons">
                  </div>


                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Diet</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/vegetables.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_plants_per_week_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours eat 
                              <span id="beta_diversity_plants_per_week_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/diet.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_diet_type_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours had a similar diet
                          </div>
                      </div>
                  </div>

                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Supplements</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/probiotics.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_probiotics_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours take probiotics 
                              <span id="beta_diversity_probiotics_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/vitamins.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_multivitamin_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours take vitamins
                              <span id="beta_diversity_multivitamin_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Activity</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/exercise.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_exercise_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours exercise 
                              <span id="beta_diversity_exercise_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/sleep.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_sleep_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours sleep more than 
                              <span id="beta_diversity_sleep_response" class="info-loader text-success">...</span>
                          </div>
                      </div>
                  </div>
                  
                  <div class="row mb-2">
                      <div class="col">
                          <h4 class="diversity-header">Demographic</h4>
                      </div>
                  </div>
                  <div class="row mb-2 mt-2">
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/age.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_age_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours are a similar age
                          </div>
                      </div>
                      <div class="col">
                          <img class="diversity-icon" src='/static/img/gender.png'>
                          <div class="diversity-text">
                              ----- <span id="beta_diversity_sleep_value" class="info-loader text-success">...</span> 
                              of people with a microbiome like yours were the same gender
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="tab-pane fade" id="taxonomy" role="tabpanel" aria-labelledby="taxonomy-tab">
              <div class="row">
                  <div class="column results_text">
                    <h3> What is in your sample? </h3>
                    <br>
                    <p>
                    Microbes have different names, which are all written in
                    Latin! Scientists do like to make things complicated!
                    </p>

                    <p>
                    Below you will find a table of all of the different
                    microbes we found in your sample, and their proportions.
                    </p>
                    
                    <div style="padding:10px">
                      <table id="taxonomyTable" class="display" style="width:100%">
                        <thead>
                        <tr>
                          <th>% of Sample</th>
                          <th>Kingdom</th>
                          <th>Phylum</th>
                          <th>Class</th>
                          <th>Order</th>
                          <th>Family</th>
                          <th>Genus</th>
                        </tr>
                        </thead>
                      </table>
                    </div>
                  </div>
              </div>
              <hr/>
              <div class="row">
                  <div class="column results_text">
                    <p>
                    In the plot below, you can see the most commonly observed
                    microbial genera in the dataset, and distribution of ranks of
                    those genera.  For example, <span id="top_ranked_genus_from_plot" class="info-loader text-success" >TOP_RANKED_GENUS_FROM_PLOT</span>
                    typically has the highest relative abundance of samples in the
                    dataset.
                    </p>
                  </div>
              </div>
              <div class="row">
                <div id="taxa-violin">
              </div>
          </div>
        </div>
          <div class="tab-pane fade" id="dataset-info" role="tabpanel" aria-labelledby="dataset-tab">
            <div class="row">
              <div class="column results_text">
                <h3>How can you learn more?</h3>
                <br/>
                  <p>
                  Microbiome analysis is a burgeoning new field, and the information
                  displayed here is only an example of what is becoming possible
                  thanks to the data that you helped collect.

                  So if you want to learn more, you can even take a look at the dataset for yourself!
                  </p>
                  <p>
                  The dataset you're looking at is called <span id="dataset_title" class="info-loader text-success" >DATASET_TITLE</span>.
                  It was sequenced with <span id="dataset_datatype" class="info-loader text-success" >DATASET_DATATYPE</span>
                  </p>
                  <p>
                  To dig deeper and start your own self directed research into the microbiome, this dataset<span id="dataset_meta_analysis" class="info-loader text-success" >DATASET_META_ANALYSIS</span> and others like it are available (after free registration) at the following link(s):
                    <ul>
                        <span id="dataset_links" class="info-loader text-success" >DATASET_LINKS</span>
                    </ul>
                  </p>
              </div>
            </div>
          </div>

    </div>
</div>
{% endblock %}
